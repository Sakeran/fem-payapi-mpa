---

export interface Props {
    label: string;
    name: string;
    type?: "text" | "email",
    required?: boolean,
    placeholder?: string;
}

const { type = "text", required = false, placeholder = "", label, name } = Astro.props as Props;

const id = name + "-" + Math.random().toString().slice(3);
---

<div data-text-input="true" class="flex flex-col">
    <label class="sr-only" for={id}>{label}</label>
    <input
        class="bg-transparent text-blue-sj/50 focus-visible:text-blue-sj hover:text-blue-sj hover focus-visible:outline-none pl-5 pb-4 border-current border-b text-15p leading-card"
        name={name} type={type} id={id} placeholder={placeholder} required={required ? "true" : "false" } />
    <p id={id + "-errors" } class="pl-5 -mb-2 mt-2 text-15p text-red/50">This field can't be empty</p>
</div>

<style lang="postcss">
    p {
        visibility: collapse;
    }

    input:invalid:not([data-controlled="true"]),
    input[data-errors="true"] {
        @apply text-red/50;
    }

    input:invalid:not([data-controlled="true"])+p,
    input[data-errors="true"]+p {
        visibility: visible;
    }
</style>

<script>
    import setupErrors from "../errorHandler";

    (function () {
        const inputContainers = document.querySelectorAll('[data-text-input="true"]');

        inputContainers.forEach(ic => {
            const input = ic.querySelector("input");
            const errors = ic.querySelector("p");

            if (!(input && errors)) throw new Error("Missing required form element");

            setupErrors(input, errors);
        })
    })()
</script>